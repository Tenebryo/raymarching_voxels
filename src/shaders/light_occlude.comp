#version 450
///functions that compute a single sample of the lighting function for a pixel
/// Implements bidirectional path tracing with importance sampling


#define PI 3.141592653

struct Material {
    uint brdf;
    vec3 albedo;
    float transparency;
    vec3 emission;
    uint flags;
    float roughness;
    float shininess;
};

//material information
layout(binding = 0) readonly buffer MaterialData {
    Material materials[];
};

// specialization constants for the local sizes
layout(local_size_x_id = 1, local_size_y_id = 2, local_size_z = 1) in;
// g-buffer information
layout(rgba32f,  binding = 1) readonly uniform image2D position_buf;
layout(rgba32f,  binding = 2) readonly uniform image2D ldir_buf;
layout(rgba32f,  binding = 3) uniform image2D light_buf;

// voxel geometry information and functions
#define VOXEL_BINDING_OFFSET 4
#include "voxel.glsl"

layout(push_constant) uniform LightOccludePushConstantData {
    float render_dist;
    uint num_materials;
    uint max_depth;
};

const vec3 INCIDENCE_NORMAL_VECTORS[3] = {vec3(1,0,0), vec3(0,1,0), vec3(0,0,1)};

/// cause indirect lighting to occlude if it intersects voxel geometry
void main() {
    ivec2 idx = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );

    ivec2 size = imageSize(position_buf);

    float aspect_ratio = float(size.x) / float(size.y);

    if (idx.x < size.x && idx.y < size.y) {

        vec3 p = imageLoad(position_buf, idx).xyz;
        vec4 ldd = imageLoad(ldir_buf, idx);

        vec3 dir = ldd.xyz;
        float ldist = ldd.w;

        float dist;
        uint incidence;
        uint material;
        uint ret_code;
        uint iterations;
        uint vid;

        bool hit = voxel_march(p + dir * MIN_VOXEL_SIZE, dir, max_depth, ldist+0.1, dist, incidence, vid, material, ret_code, iterations);

        dist += MIN_VOXEL_SIZE;

        vec4 light = imageLoad(light_buf, idx);

        if (hit && material < num_materials) {
            float rdd = 1 / (dist * dist);
            // if we collide with a voxel in the path to the light, at least contribute it's emission value
            light = vec4(materials[material].emission * max(0,dot(INCIDENCE_NORMAL_VECTORS[incidence], -dir)), 1.0);
        } else if (hit) {
            // wrong material reference, we assume no material emission
            light = vec4(0,0,0,1);
        }
        // otherwise, we keep the light value from the light, which was set from the bounce shader
        imageStore(light_buf, idx, light);
    }
}