#version 450
///functions that compute a single sample of the lighting function for a pixel
/// Implements bidirectional path tracing with importance sampling


// specialization constants for the local sizes
layout(local_size_x_id = 1, local_size_y_id = 2, local_size_z = 1) in;

#define PI 3.141592653

struct PointLight {
    vec3 position;
    float power;
    vec3 color;
    float radius;
    float max_radiance;
};

struct DirectionalLight {
    vec3 direction;
    float noise_scale;
    vec3 color;
};

struct SpotLight {
    vec3 position;
    float power;
    vec3 direction;
    float half_angle;
    vec3 color;
    float max_radiance;
};

struct Material {
    uint brdf;
    vec3 albedo;
    float transparency;
    vec3 emission;
    uint flags;
    float roughness;
    float metalness;
};

// lighting data
layout(binding = 0) readonly buffer PointLightData{PointLight point_lights[];};
layout(binding = 1) readonly buffer DirectionalLightData{DirectionalLight directional_lights[];};
layout(binding = 2) readonly buffer SpotLightData{SpotLight spots_lights[];};
layout(rgba32f,  binding = 3) readonly uniform image2D   pos_buf;
layout(r32ui,    binding = 4) readonly uniform uimage2D  mat_buf;
layout(rgba32f,  binding = 5) readonly uniform image2D   noise_buf;
layout(r32ui,    binding = 6) readonly uniform uimage2D  sample_mask_buf;
layout(rgba32f,  binding = 7) writeonly uniform image2D  light_direction_buf;
layout(rgba32f,  binding = 8) writeonly uniform image2D  light_power_buf;

layout(push_constant) uniform PathLightPushConstantData {
    uint n_point_lights;
    uint n_directional_lights;
    uint n_spot_lights;
    float render_dist;
    uint max_depth;
};

/// computes the theta and phi angles for an incident ray
///  * `n` : the normal vector (normalized)
///  * `p` : a parallel vector (normalized)
///  * `i` : the incident vector (normalized)
vec3 vector_from_incident_angles(vec3 n, vec3 p, float theta, float phi) {
    vec3 q = cross(n, p);

    float cos_theta = cos(theta);

    return (sin(theta)) * n + (cos_theta * cos(phi)) * p + (cos_theta * sin(phi)) * q;
}

vec2 sample_sphere(float r0, float r1) {
    // return vec2(acos(r1), 2 * PI * r0);
    return vec2(PI * r1, 2 * PI * r0);
}

void main() {
    ivec2 idx = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );

    ivec2 size = imageSize(pos_buf);

    if (idx.x < size.x && idx.y < size.y) {

        vec4 pos4 = imageLoad(pos_buf, idx);
        uint mask = imageLoad(sample_mask_buf, idx).r;

        if (pos4.w < 1e-6 || mask == 0) {
            // exit if there aren't rays to cast or we are skipping this pixel
            return;
        }

        vec3 pos = pos4.xyz;

        vec4 ns = imageLoad(noise_buf, idx);
        
        // sample lighting to the point:
        // * choose a random light and sample a point from the light surface/volume
        // * cast rays from path intersection point to the chosen light point
        // * calculate light contributions

        vec2 sphere_angles = sample_sphere(ns.x + 1e-6, 0.99 * ns.y);

        vec3 sphere_point = ns.z * vector_from_incident_angles(vec3(0,1,0), vec3(1,0,0), sphere_angles.x, sphere_angles.y);

        uint n_lights = n_directional_lights + n_point_lights + n_spot_lights;

        uint li = uint(abs(ns.w) * n_lights);
        uint light_index = li;
        uint light_type = 0;

        if (li >= n_directional_lights) {
            light_type++;
            li -= n_directional_lights;

            if (li >= n_point_lights) {
                light_type++;
                li -= n_point_lights;
            }
        }

        vec3 ray_direction = vec3(0);
        vec4 light_val = vec4(0);
        float light_dist = 0;

        // calculate light-type dependent values separately
        if (light_type == 0) {
            ray_direction = -directional_lights[li].direction;

            ray_direction += sphere_point * directional_lights[li].noise_scale;

            ray_direction = normalize(ray_direction);

            light_dist = render_dist;

            light_val.xyz = n_lights * directional_lights[li].color;
            light_val.w = 1;
        } else if (light_type == 1) {
            vec3 lpos = point_lights[li].position;
            float r = point_lights[li].radius;
            float mrad = point_lights[li].max_radiance;

            ray_direction = lpos + sphere_point * r - pos;
            
            light_dist = length(ray_direction);

            ray_direction = normalize(ray_direction);
            
            vec3 lcol = point_lights[li].color;
            float lpow = point_lights[li].power;

            light_val.xyz = lcol * (n_lights * min(mrad, lpow / (light_dist * light_dist)));
            light_val.w = 1;
        } else if (light_type == 2) {
            // spot light. for now assume perfect point lights
            ray_direction = spots_lights[li].position - pos;

            float mrad = point_lights[li].max_radiance;

            light_dist = length(ray_direction);

            ray_direction = normalize(ray_direction);

            light_val.xyz = spots_lights[li].color * min(mrad, max(0, pow(dot(spots_lights[li].direction, -ray_direction), 3)) * spots_lights[li].power / (light_dist * light_dist));
            light_val.w = 1;
        }

        imageStore(light_direction_buf, idx, vec4(ray_direction, light_dist));
        imageStore(light_power_buf,     idx, light_val);
    }
}