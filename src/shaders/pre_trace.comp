#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(r32f, binding = 0) uniform image2D dImage;  // depth

#define VOXEL_BINDING_OFFSET 1
#include "voxel.glsl"

layout(push_constant) uniform PreTracePushConstants {
    vec3 camera_origin;
    vec3 camera_forward;
    vec3 camera_up;
    uint max_depth;
};

const vec3 colors[5] = {
    vec3(0xDC / float(0xFF), 0xE0 / float(0xFF), 0xD9 / float(0xFF)),
    vec3(0x31 / float(0xFF), 0x08 / float(0xFF), 0x1F / float(0xFF)),
    vec3(0x6B / float(0xFF), 0x0F / float(0xFF), 0x1A / float(0xFF)),
    vec3(0x59 / float(0xFF), 0x59 / float(0xFF), 0x59 / float(0xFF)),
    vec3(0x80 / float(0xFF), 0x8F / float(0xFF), 0x85 / float(0xFF))
};


const vec3 colors8[8] = {
    vec3(0.5, 0.0, 0.0), vec3(1.0, 0.0, 0.0),
    vec3(0.0, 0.5, 0.0), vec3(0.0, 1.0, 0.0),
    vec3(0.0, 0.0, 0.5), vec3(0.0, 0.0, 1.0),
    vec3(0.5, 0.5, 0.0), vec3(1.0, 1.0, 0.0),
};

void main() {
    ivec2 idx = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );

    ivec2 size = imageSize(dImage);

    float aspect_ratio = float(size.x) / float(size.y);

    if (idx.x < size.x && idx.y < size.y) {
        // calculate ray for this pixel by constructing a virtual screen
        vec3 vx = normalize(cross(camera_forward, camera_up));
        vec3 vy = normalize(cross(camera_forward, vx));

        // ND coordinates [0,1]x[0,1]
        vec2 ndc = vec2(idx) / vec2(size-1);

        // (pseudo) screen space coordinates [-1,1]x[-1,1]
        vec2 ssc = 2 * (ndc - 0.5);

        // the ray direction for this pixel
        vec3 ray_dir = normalize(camera_forward + aspect_ratio * ssc.x * vx + ssc.y * vy);

        uint incidence = 0;
        float dist = 0;

        vec3 normals[3] = {
            vec3(1,0,0),
            vec3(0,1,0),
            vec3(0,0,1)
        };
        uint vid = 0;
        uint code;
        uint iter;
        float max_dist = 100;
        uint material;
        bool hit = voxel_march(camera_origin, ray_dir, max_depth, max_dist, dist, incidence, vid, material, code, iter);

        if (hit) {
            imageStore(dImage, idx, vec4(dist));
        } else {
            imageStore(dImage, idx, vec4(-1));
        }
    }
}