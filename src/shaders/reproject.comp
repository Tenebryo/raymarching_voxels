#version 450
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// color map in
layout(rgba32f, binding = 0) uniform image2D inBuffer;
// world positions in
layout(rgba32f, binding = 1) uniform image2D pBuffer;
// color map out
layout(rgba32f, binding = 2) uniform image2D outBuffer;
// we already know the world positions out (the positions from the current frame)

layout(push_constant) uniform ReprojectPushConstantData {
    vec3 origin;
    vec3 forward;
    vec3 up;
};

void main() {

    
    ivec2 idx = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );

    ivec2 size = imageSize(outBuffer);

    float aspect_ratio = float(size.x) / float(size.y);

    if (idx.x < size.x && idx.y < size.y) {
        // calculate the x- and y-axis of the new camera plane
        vec3 sx = normalize(cross(forward, up));
        vec3 sy = normalize(cross(forward, sx));

        // get the world position
        vec3 wp = imageLoad(pBuffer, idx).xyz;
        
        // vector/ray from new camera origin to world position of intersection
        vec3 v = wp - origin;

        // check that the intersection is in front of the camera
        float d = dot(forward, v);

        // intersect v into the new camera plane.
        v *= dot(forward, forward) / d;

        // determine the new coordinates on the camera plane ([0, 1])
        vec2 uv = vec2(dot(sx, v) / aspect_ratio, dot(sy, v)) * 0.5 + 0.5;

        // new screen coordinates
        ivec2 nsc = ivec2(size * uv);

        // store the previously rendered pixel in the new position
        imageStore(outBuffer, nsc, imageLoad(inBuffer, idx));
    }
}