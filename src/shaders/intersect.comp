#version 450


// specialization constants for the local sizes
layout(local_size_x_id = 1, local_size_y_id = 2, local_size_z = 1) in;

layout(r32f, binding = 0) readonly uniform image2D initialDepthImage;  // depth
layout(rgba32f, binding = 1) uniform image2D nImage;  // normal
layout(rgba32f, binding = 2) uniform image2D pImage;  // world position
layout(r32f, binding = 3) uniform image2D dImage;  // depth
layout(r32ui, binding = 4) uniform uimage2D mImage;   // material index
layout(rgba32f, binding = 5) uniform image2D s0Image;   // random seed index
layout(rgba32f, binding = 6) uniform image2D s1Image;   // random seed index
layout(rgba32f, binding = 7) uniform image2D s2Image;   // random seed index
layout(binding = 8) uniform sampler3D blue_noise;   // random noise
layout(rgba32ui, binding = 9) uniform uimage2D iteration_buf;   // random noise
layout(rg32ui,   binding = 10) uniform uimage2D stratum_buf;   // random noise

#define VOXEL_BINDING_OFFSET 11
#include "voxel.glsl"

layout(push_constant) uniform IntersectPushConstants {
    vec3 camera_origin;
    uint frame_idx;
    vec3 camera_forward;
    uint max_depth;
    vec3 camera_up;
    float render_dist;
    uvec3 noise_0;
    uvec3 noise_1;
    uvec3 noise_2;
    uint noise_frames;
};

const vec3 INCIDENCE_NORMAL_VECTORS[3] = {vec3(1,0,0), vec3(0,1,0), vec3(0,0,1)};

void main() {
    ivec2 idx = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );

    ivec2 size = imageSize(pImage);

    float aspect_ratio = float(size.x) / float(size.y);

    if (idx.x < size.x && idx.y < size.y) {

        ivec2 tile_idx = idx / int(noise_frames);

        vec4 noise_value_0 = texture(blue_noise, vec3((idx + ivec2(noise_0.x, noise_0.y)) / vec2(noise_frames), noise_0.z / float(noise_frames)));
        vec4 noise_value_1 = texture(blue_noise, vec3((idx + ivec2(noise_1.x, noise_1.y)) / vec2(noise_frames), noise_1.z / float(noise_frames)));
        vec4 noise_value_2 = texture(blue_noise, vec3((idx + ivec2(noise_2.x, noise_2.y)) / vec2(noise_frames), noise_2.z / float(noise_frames)));

        // calculate ray for this pixel by constructing a virtual screen
        vec3 vx = normalize(cross(camera_forward, camera_up));
        vec3 vy = normalize(cross(camera_forward, vx));

        // ND coordinates [0,1]x[0,1]
        vec2 ndc = vec2(idx) / vec2(size);

        // (pseudo) screen space coordinates [-1,1]x[-1,1]
        vec2 ssc = 2 * (ndc - 0.5);

        // the ray direction for this pixel
        vec3 ray_dir = normalize(camera_forward + aspect_ratio * ssc.x * vx + ssc.y * vy);

        ivec2 pre_idx = idx / 8;

        float init_depth = min(
            min(
                imageLoad(initialDepthImage, pre_idx + ivec2(0,0)).x,
                imageLoad(initialDepthImage, pre_idx + ivec2(1,0)).x
            ),
            min(
                imageLoad(initialDepthImage, pre_idx + ivec2(0,1)).x,
                imageLoad(initialDepthImage, pre_idx + ivec2(1,1)).x
            )
        );

        init_depth = max(init_depth, 0);

        uint incidence = 0;
        float dist = 0;

        vec3 normals[3] = {
            vec3(1,0,0),
            vec3(0,1,0),
            vec3(0,0,1)
        };
        uint vid = 0;
        uint ret;
        uint iter;
        uint material;
        bool hit = voxel_march(camera_origin + ray_dir * init_depth, ray_dir, max_depth, render_dist, dist, incidence, vid, material, ret, iter);

        dist += init_depth;
        vec3 p = camera_origin + ray_dir * dist;
        vec3 n = INCIDENCE_NORMAL_VECTORS[incidence] * sign(-ray_dir);

        uint noise_scale = 4096;

        // get spatially diverse samples (i.e. no repeating 64x64 blue noise)

        if (hit) {
            imageStore(nImage, idx, vec4(n, 1.0));
            imageStore(dImage, idx, vec4(dist));
            imageStore(pImage, idx, vec4(p, 1.0));
            imageStore(mImage, idx, uvec4(material));
            imageStore(s0Image, idx, noise_value_0);
            imageStore(s1Image, idx, noise_value_1);
            imageStore(s2Image, idx, noise_value_2);
            imageStore(iteration_buf, idx, uvec4(iter, 0, 0, 0));
            imageStore(stratum_buf, idx, uvec4(noise_value_2.zwxy * 4));
        } else {
            imageStore(nImage, idx, vec4(0.0));
            imageStore(dImage, idx, vec4(render_dist+1));
            imageStore(pImage, idx, vec4(render_dist * ray_dir, 0.0));
            imageStore(mImage, idx, uvec4(0));
            imageStore(s0Image, idx, noise_value_0);
            imageStore(s1Image, idx, noise_value_1);
            imageStore(s2Image, idx, noise_value_2);
            imageStore(iteration_buf, idx, uvec4(iter, 0, 0, 0));
            imageStore(stratum_buf, idx, uvec4(noise_value_2.zwxy * 4));
        }
    }
}