#version 450
///functions that compute a single sample of the lighting function for a pixel
/// Implements bidirectional path tracing with importance sampling


// specialization constants for the local sizes
layout(local_size_x_id = 1, local_size_y_id = 2, local_size_z = 1) in;

#define PI 3.141592653

struct PointLight {
    vec3 position;
    float power;
    vec3 color;
    float radius;
};

struct DirectionalLight {
    vec3 direction;
    vec3 color;
};

struct SpotLight {
    vec3 position;
    float power;
    vec3 direction;
    float half_angle;
    vec3 color;
};

struct Material {
    uint brdf;
    vec3 albedo;
    float transparency;
    vec3 emission;
    uint flags;
    float roughness;
    float metalness;
};

//material information
layout(binding = 0) readonly buffer MaterialData {
    Material materials[];
};

// lighting data
layout(binding = 1) readonly buffer PointLightData{
    PointLight point_lights[];
};
layout(binding = 2) readonly buffer DirectionalLightData{
    DirectionalLight directional_lights[];
};
layout(binding = 3) readonly buffer SpotLightData{
    SpotLight spots_lights[];
};

// g-buffer information
layout(rgba32f,  binding = 4)  readonly uniform image2D position0_buf;
layout(rgba32f,  binding = 5)  uniform image2D position1_buf;
layout(rgba32f,  binding = 6)  readonly uniform image2D normal0_buf;
layout(rgba32f,  binding = 7)  uniform image2D normal1_buf;
layout(r32f,     binding = 8)  readonly uniform image2D depth_buf;
layout(r32ui,    binding = 9)  readonly uniform uimage2D material0_buf;
layout(r32ui,    binding = 10) uniform uimage2D material1_buf;
layout(rgba32ui, binding = 11) readonly uniform uimage2D rng_seed_buf;
layout(rgba32ui, binding = 12) uniform uimage2D light_index_buf;
layout(rgba32f,  binding = 13) uniform image2D ldir0_buf;
layout(rgba32f,  binding = 14) uniform image2D ldir1_buf;
layout(rgba32f,  binding = 15) uniform image2D light0_buf;
layout(rgba32f,  binding = 16) uniform image2D light1_buf;
layout(rgba32ui, binding = 17) uniform uimage2D iteration_buf;

// voxel geometry information and functions
#define VOXEL_BINDING_OFFSET 18
#include "voxel.glsl"

layout(push_constant) uniform LightBouncePushConstantData {
    vec3 camera_origin;
    uint n_point_lights;
    vec3 camera_forward;
    uint n_directional_lights;
    vec3 camera_up;
    uint n_spot_lights;
    float render_dist;
    uint max_depth;
};

/// calculate the half-angle vector from two incident vectors (normalized)
vec3 calculate_half_angle_from_incidents(vec3 o, vec3 i) {
    return normalize(o + i);
}

/// calculate the other incident direction from one incident vector and the half-angle vector
///  * `o` : the given incident vector (normalized)
///  * `h` : the half angle vector (normalized)
vec3 calculate_incident_from_half_angle(vec3 o, vec3 h) {
    vec3 prj = o - dot(h, o) * h;
    return o - 2 * prj;
}

/// computes the theta and phi angles for an incident ray
///  * `n` : the normal vector (normalized)
///  * `p` : a parallel vector (normalized)
///  * `i` : the incident vector (normalized)
vec2 incident_angles_from_vector(vec3 n, vec3 p, vec3 i) {
    vec3 q = cross(n, p);
    float dqi = dot(q, i);

    // project onto plane
    vec3 nprj = dot(n, i) * n;
    vec3 pprj = dot(p, i) * p;
    vec3 qprj = dqi * q;


    float theta = acos(dot(p, normalize(nprj + pprj)));
    float phi = acos(dot(p, normalize(pprj + qprj))) * sign(dqi);

    return vec2(theta, phi);
}

/// computes the theta and phi angles for an incident ray
///  * `n` : the normal vector (normalized)
///  * `p` : a parallel vector (normalized)
///  * `i` : the incident vector (normalized)
vec3 vector_from_incident_angles(vec3 n, vec3 p, float theta, float phi) {
    vec3 q = cross(n, p);

    float cos_theta = cos(theta);

    return (sin(theta)) * n + (cos_theta * cos(phi)) * p + (cos_theta * sin(phi)) * q;
}

/// calculate a value from a 3d halton sequence, a form of PRNG for evenly spacing samples out over a sequence
vec3 halton_sequence3(uint index, uvec3 base) {
    float f = 1;
    vec3 r = vec3(0);

    uint i = index;
    while (i > 0) {
        f = f / base.x;
        r.x += f * mod(i, base.x);
        i = i / base.x;
    }

    f = 1;
    i = index;
    while (i > 0) {
        f = f / base.y;
        r.y += f * mod(i, base.y);
        i = i / base.y;
    }

    f = 1;
    i = index;
    while (i > 0) {
        f = f / base.z;
        r.z += f * mod(i, base.z);
        i = i / base.z;
    }

    return r;
}

/// pick a point on a hemisphere
/// r0 and r1 are two uniform random numbers in [0,1)
vec2 sample_hemisphere(float r0, float r1) {
    // return vec2(acos(r1), 2 * PI * r0);
    return vec2(PI * r1 * 0.5, 2 * PI * r0);
}

const vec3 INCIDENCE_NORMAL_VECTORS[3] = {vec3(1,0,0), vec3(0,1,0), vec3(0,0,1)};

/// do multiple importance path tracing with 
void main() {
    ivec2 idx = ivec2(
        gl_GlobalInvocationID.x,
        gl_GlobalInvocationID.y
    );

    ivec2 size = imageSize(position0_buf);

    float aspect_ratio = float(size.x) / float(size.y);

    if (idx.x < size.x && idx.y < size.y) {

        vec4  p = imageLoad(position0_buf, idx);

        if (p.w < 1e-6) {
            return;
        }

        vec4  n = imageLoad(normal0_buf, idx);
        vec4  d = imageLoad(depth_buf, idx);
        uvec4 m = imageLoad(material0_buf, idx);
        uvec4 s = imageLoad(rng_seed_buf, idx);

        vec3 out_0 = normalize(camera_origin - p.xyz);

        // generate some pseudo random numbers
        vec3 rv0 = halton_sequence3(s.x, uvec3(2,3,5));
        vec3 rv1 = halton_sequence3(s.y, uvec3(2,3,5));
        vec3 rv2 = halton_sequence3(s.z, uvec3(2,3,5));

        uint li = 0, vmat_1 = 0;
        vec3 ldir0 = vec3(0), ldir1 = vec3(0);
        vec4 p1 = vec4(0), light0 = vec4(0), light1 = vec4(0), norm1 = vec4(0);
        float ldist0 = 0, ldist1 = 0;

        if (p.w > 0.5) {
            
            // sample 1 bounces from brdf (6 random numbers)

            // vec2 o_angles_0 = incident_angles_from_vector(n.xyz, n.zxy, out_0);
            // vec2 i_angles_0 = sample_brdf(materials[m.x].brdf, o_angles_0.x, o_angles_0.y, rv0.x, rv0.y, rv0.z);
            vec2 i_angles_0 = sample_hemisphere(rv0.x, rv0.y);
            vec3 h_0 = vector_from_incident_angles(n.xyz, n.zxy, i_angles_0.x, i_angles_0.y);

            // h_0 = n.xyz;
            // h_0 = normalize(8 * n.xyz + h_0);

            // vec3 in_0 = calculate_incident_from_half_angle(out_0, h_0);
            // vec3 in_0 = out_0;
            vec3 in_0 = h_0;

            vec3 p0 = p.xyz;

            float dist;
            uint incidence;
            uint vox_id;
            uint code;
            uint iterations;

            float init_dist = MIN_VOXEL_SIZE;

            // raytrace to the next intersection
            bool hit = voxel_march(p0 + in_0 * init_dist, in_0, max_depth, render_dist, dist, incidence, vox_id, vmat_1, code, iterations);

            uvec4 itervec = imageLoad(iteration_buf, idx);
            itervec.y = iterations;
            imageStore(iteration_buf, idx, uvec4(itervec));

            if (hit) {
                p1.w = 1.0;
                norm1.w = 1.0;
                light0.w = 1.0;
                light1.w = 1.0;
                p1.xyz = p0 + in_0 * (dist + init_dist);
                norm1.xyz = INCIDENCE_NORMAL_VECTORS[incidence] * sign(-in_0);
            }

            // sample lighting to the two points:
            // * choose a random light and sample a point from the light surface
            // * cast rays from path intersection points to the chosen light point
            // * calculate light contributions

            li = s.y % (n_directional_lights + n_point_lights + n_spot_lights);
            uint l_type = 0;

            if (li >= n_directional_lights) {
                l_type++;
                li -= n_directional_lights;

                if (li >= n_point_lights) {
                    l_type++;
                    li -= n_point_lights;
                }
            }

            // calculate light-type dependent values separately 
            // TODO: stochastic sample from light source
            if (l_type == 0) {
                // directional light. for now assume all light is collimated
                ldir0 = -directional_lights[li].direction;
                ldir1 = ldir0;

                ldir0 += rv1 * 0.2;
                ldir1 += rv2 * 0.2;

                ldir0 = normalize(ldir0);
                ldir1 = normalize(ldir1);

                ldist0 = render_dist;
                ldist1 = render_dist;

                light0.xyz = directional_lights[li].color;
                light1 = light0;
            } else if (l_type == 1) {
                // point light. for now assume perfect point lights
                ldir0 = point_lights[li].position - p0;
                ldir1 = point_lights[li].position - p1.xyz;
                
                ldist0 = length(ldir0);
                ldist1 = length(ldir1);

                ldir0 = normalize(ldir0);
                ldir1 = normalize(ldir1);
                
                light0.xyz = point_lights[li].color * point_lights[li].power / (ldist0 * ldist0);
                light1.xyz = point_lights[li].color * point_lights[li].power / (ldist1 * ldist1);
            } else if (l_type == 2) {
                // spot light. for now assume perfect point lights
                ldir0 = spots_lights[li].position - p0;
                ldir1 = spots_lights[li].position - p1.xyz;

                ldist0 = length(ldir0);
                ldist1 = length(ldir1);

                ldir0 = normalize(ldir0);
                ldir1 = normalize(ldir1);

                light0.xyz = spots_lights[li].color * max(0, pow(dot(spots_lights[li].direction, -ldir0), 3)) * spots_lights[li].power / (ldist0 * ldist0);
                light1.xyz = spots_lights[li].color * max(0, pow(dot(spots_lights[li].direction, -ldir1), 3)) * spots_lights[li].power / (ldist1 * ldist1);
            }

            if (!hit) {
                // if there isn't a second intersection, we just take the skybox emittance
                ldist1 = 0;
                light1 = vec4(0);
                ldir1 = vec3(0);
                p1 = vec4(in_0 * render_dist, 0);
                norm1 = vec4(0);
                vmat_1 = 0;
            }
        }

        imageStore(light_index_buf, idx, uvec4(li));
        imageStore(material1_buf,   idx, uvec4(vmat_1));
        imageStore(ldir0_buf,       idx, vec4(ldir0, ldist0));
        imageStore(ldir1_buf,       idx, vec4(ldir1, ldist1));
        imageStore(position1_buf,   idx, p1);
        imageStore(normal1_buf,     idx, norm1);
        imageStore(light0_buf,      idx, light0);
        imageStore(light1_buf,      idx, light1);
    }
}